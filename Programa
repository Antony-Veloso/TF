import java.util.Random;
import java.util.Scanner;
public class TF
{
    //
    // Mostra o conteúdo da matriz de caracteres na saída de console
    //
    public static void MostraMatriz(char[][] M, int linhas, int colunas)
    {
        for(int L=0; L<linhas; L++)
        {
            for(int C=0; C<colunas; C++)
            {
                System.out.printf(" %c ", M[L][C]);
            }
            System.out.printf("\n");
        }
    }
    
    //
    // Retorna o valor absoluto (sem sinal) do número informado.
    //
    public static double Modulo(int valor)
    {
        return Math.sqrt(valor * valor);
    }
    
    
        public static void Caminho(char[][] M, int POx, int POy, int PDx, int PDy, char simbolo) {
        double DistY = Modulo(POy - PDy);
        double DistX = Modulo(POx - PDx);
        double Dist = DistX + DistY;
        double DeslY = DistY / Dist;  // calcula o deslocamento necessário no eixo Y a cada iteracao
        double DeslX = DistX / Dist;  // calcula o deslocamento necessário no eixo X a cada iteracao
        
        // coordenadas a serem utilizadas como ponto de partida
        double PosY = POy; 
        double PosX = POx;

        for(int avanco=0; avanco<Dist; avanco++)
        {
            // informacoes para depuracao
            //System.out.printf("DeslY: %f ::: DeslX: %f\nPosY: %f ::: PosX: %f\n\n", DeslY, DeslX, PosY, PosX);
            M[(int)PosY][(int)PosX] = simbolo;
            
            //
            // decide por incrementar ou decrementar os deslocamentos,
            // dependendo das posicoes relativas dos pontos de Origem
            // e de Destino. Para colunas iguais ou linhas iguais, 
            // o deslocamento será de zero na coordenada.
            //
            if(PDy > POy) // linha de destino esta abaixo da de origem?
            {
                PosY += DeslY;    
            } else if(PDy < POy) // linha de destino esta acima da de origem?
            {
                PosY -= DeslY;    
            }

            if(PDx > POx) // coluna de destino esta a direita da de origem?
            {
                PosX += DeslX;    
            } else if(PDx < POx) // coluna de destino esta a esquerda da de origem?
            {
                PosX -= DeslX;    
            }            

        }
    }
    
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        Random rd = new Random();
        int Linhas, Colunas;
        do {
            System.out.print("Informe a quantidade de linhas (>= 3): ");
            Linhas = sc.nextInt();
        } while (Linhas < 3);

        do {
            System.out.print("Informe a quantidade de colunas (>= 3): ");
            Colunas = sc.nextInt();
        } while (Colunas < 3);
        
        char[][] M = new char[Linhas][Colunas];
        
        // popula a matriz com pontos
        for(int L=0; L<Linhas; L++)
        {
            for(int C=0; C<Colunas; C++)
            {
                M[L][C] = '.';
            }
        }

        int Ax, Ay, Bx, By, Cx, Cy, Dx, Dy;

        Ax = rd.nextInt(Colunas);
        Ay = rd.nextInt(Linhas);

        do {
            Bx = rd.nextInt(Colunas);
            By = rd.nextInt(Linhas);
        } while (Bx == Ax && By == Ay);

        do {
            Cx = rd.nextInt(Colunas);
            Cy = rd.nextInt(Linhas);
        } while ((Cx == Ax && Cy == Ay) || (Cx == Bx && Cy == By));

        do {
            Dx = rd.nextInt(Colunas);
            Dy = rd.nextInt(Linhas);
        } while (Dx == Ax && Dy == Ay ||Dx == Bx && Dy == By || Dx == Cx && Dy == Cy);
        
        System.out.printf("::: Ponto A: L=%d, C=%d\n", Ay, Ax);
        System.out.printf("::: Ponto B: L=%d, C=%d\n", By, Bx);
        System.out.printf("::: Ponto C: L=%d, C=%d\n", Cy, Cx);
        System.out.printf("::: Ponto D: L=%d, C=%d\n", Dy, Dx);
        System.out.println("::: >>> Nenhum ponto com coordenadas repetidas! <<<");

        // Desenha os caminhos
        Caminho(M, Ax, Ay, Bx, By, '+');
        Caminho(M, Cx, Cy, Dx, Dy, '*');
        
        // Marca os pontos
        M[Ay][Ax] = 'A';
        M[By][Bx] = 'B';
        M[Cy][Cx] = 'C';
        M[Dy][Dx] = 'D';
        
        // Mostra a matriz resultante no console
        MostraMatriz(M, Linhas, Colunas);
        
    }    
}
